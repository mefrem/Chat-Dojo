rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    
    function isParticipant(participants) {
      return request.auth.uid in participants;
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read user profiles
      allow read: if isAuthenticated();
      
      // Users can only create/update their own profile
      allow create, update: if isAuthenticated() && isOwner(userId);
      
      // Users cannot delete profiles
      allow delete: if false;
      
      // Reflections subcollection (Phase 2: AI Intelligence)
      match /reflections/{reflectionId} {
        // Users can only read their own reflections
        allow read: if isAuthenticated() && isOwner(userId);
        
        // Only Cloud Functions can create/update reflections
        allow create, update: if false;
        
        // Users cannot delete reflections
        allow delete: if false;
      }
      
      // Contacts subcollection (Phase 3: Matching & Connection)
      match /contacts/{contactId} {
        // Users can only read their own contacts
        allow read: if isAuthenticated() && isOwner(userId);
        
        // Users can create/update/delete their own contacts
        allow create, update, delete: if isAuthenticated() && isOwner(userId);
      }
      
      // Notifications subcollection (Phase 4: Habit Building)
      match /notifications/{notificationId} {
        // Users can only read their own notifications
        allow read: if isAuthenticated() && isOwner(userId);
        
        // Users and system can create notifications
        allow create: if isAuthenticated();
        
        // Users can update/delete their own notifications
        allow update, delete: if isAuthenticated() && isOwner(userId);
      }
      
      // Push Tokens subcollection (Phase 4: Habit Building)
      match /pushTokens/{tokenId} {
        // Users can only read their own push tokens
        allow read: if isAuthenticated() && isOwner(userId);
        
        // Users can create/update/delete their own push tokens
        allow create, update, delete: if isAuthenticated() && isOwner(userId);
      }
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Users can only read conversations they're part of
      allow read: if isAuthenticated() && isParticipant(resource.data.participants);
      
      // Users can create conversations if they're in the participants list
      allow create: if isAuthenticated() && isParticipant(request.resource.data.participants);
      
      // Users can update conversations they're part of
      allow update: if isAuthenticated() && isParticipant(resource.data.participants);
      
      // Users cannot delete conversations
      allow delete: if false;
    }
    
    // Messages collection
    match /messages/{messageId} {
      // Users can read messages from conversations they're part of
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
        isParticipant(get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants);
      
      // Users can create messages in conversations they're part of
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.senderId) &&
        exists(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)) &&
        isParticipant(get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.participants);
      
      // Users can update their own messages (for status updates)
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.senderId) || 
         isParticipant(get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants));
      
      // Users cannot delete messages
      allow delete: if false;
    }
    
    // Typing indicators collection
    match /typing-indicators/{indicatorId} {
      // Users can read typing indicators for conversations they're in
      allow read: if isAuthenticated();
      
      // Users can create/update their own typing indicators
      allow create, update: if isAuthenticated() && isOwner(request.resource.data.userId);
      
      // Users can delete their own typing indicators
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Matching Queue collection (Phase 3: Matching & Connection)
    match /matchingQueue/{requestId} {
      // Users can read all pending match requests (for matching logic)
      allow read: if isAuthenticated();
      
      // Users can create their own match requests
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      
      // Users can update/delete their own match requests
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Direct Match Requests collection (Phase 3: Matching & Connection)
    match /directMatchRequests/{requestId} {
      // Users can read requests they sent or received
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId));
      
      // Users can create requests from themselves
      allow create: if isAuthenticated() && isOwner(request.resource.data.fromUserId);
      
      // Users can update requests they received (to accept/decline)
      allow update: if isAuthenticated() && isOwner(resource.data.toUserId);
      
      // Users can delete their own sent or received requests
      allow delete: if isAuthenticated() && 
        (isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId));
    }
    
    // Personal Reflections collection (Post-Talk Self-Reflection)
    match /personalReflections/{reflectionId} {
      // Users can only read their own reflections
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      
      // Users can create their own reflections
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      
      // Users can update their own reflections
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      
      // Users can delete their own reflections
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Reflection Analysis collection (AI-powered theme analysis)
    match /reflectionAnalysis/{analysisId} {
      // Users can only read their own analysis
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      
      // Only Cloud Functions can write analysis
      allow create, update, delete: if false;
    }
  }
}

